name: CI/CD Dev Pipeline

on:
  push:
    branches: [ 'main' ]

env:
  REGISTRY: ghcr.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
      - name: Set build matrix based on changes
        id: set-matrix
        run: |
          # Tüm bileşenler için matrix elemanlarını tanımla
          declare -A components=(
            ["mlflow"]='{"name":"MlFlow Build","dockerfile":"./mlflow/Dockerfile","image":"${{ github.repository }}/mlflow","tag":"ghcr.io/galaksiyait/timereactor/mlflow:v1.0.0-RC1, ghcr.io/galaksiyait/timereactor/mlflow:latest"}'
            ["modeloperator"]='{"name":"Training Api Build","dockerfile":"./modeloperator/Dockerfile","image":"${{ github.repository }}/training-api","tag":"ghcr.io/galaksiyait/timereactor/training-api:v1.0.0-RC5, ghcr.io/galaksiyait/timereactor/training-api:latest"}'
            ["streamlit_app"]='{"name":"Streamlit Application Build","dockerfile":"./streamlit_app/Dockerfile","image":"${{ github.repository }}/app","tag":"ghcr.io/galaksiyait/timereactor/app:v1.0.0-RC5, ghcr.io/galaksiyait/timereactor/app:latest"}'
            ["timereactorapi"]='{"name":"Time Reactor Api Build","dockerfile":"./timereactorapi/Dockerfile","image":"${{ github.repository }}/timereactor-api","tag":"ghcr.io/galaksiyait/timereactor/timereactor-api:v1.0.0-RC6, ghcr.io/galaksiyait/timereactor/timereactor-api:latest"}'
            ["mlflow_model_registry"]='{"name":"Model Registry Build","dockerfile":"./mlflow_model_registry/Dockerfile","image":"${{ github.repository }}/model-registry","tag":"ghcr.io/galaksiyait/timereactor/model-registry:v1.0.0-RC2, ghcr.io/galaksiyait/timereactor/model-registry:latest"}'
            ["airflow"]='{"name":"Airflow Build","dockerfile":"./airflow/Dockerfile","image":"${{ github.repository }}/airflow","tag":"ghcr.io/galaksiyait/timereactor/airflow:v1.0.0-RC1, ghcr.io/galaksiyait/timereactor/airflow:latest"}'
          )

          # Değişen bileşenleri tespit et
          changed_components=()
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Changed file: $file"
            for component in "${!components[@]}"; do
              if [[ "$file" == "$component/"* ]]; then
                echo "Detected changes in $component"
                changed_components+=("${components[$component]}")
                break
              fi
            done
          done

          # Eğer hiç değişiklik yoksa tüm bileşenleri build et (isteğe bağlı)
          if [ ${#changed_components[@]} -eq 0 ]; then
            echo "No component-specific changes detected, building all components"
            for component in "${components[@]}"; do
              changed_components+=("$component")
            done
          fi

          # Matrix'i JSON formatında oluştur
          matrix_json="{\"include\":["
          first=true
          for item in "${changed_components[@]}"; do
            if [ "$first" = false ]; then
              matrix_json+=","
            fi
            matrix_json+="$item"
            first=false
          done
          matrix_json+="]}"

          echo "Generated matrix: $matrix_json"
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  build-components:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Print build info
        run: |
          echo "Building component: ${{ matrix.name }}"
          echo "Dockerfile: ${{ matrix.dockerfile }}"
          echo "Image: ${{ matrix.image }}"
          echo "Tags: ${{ matrix.tag }}"
      - name: Build and push Docker images
        run: |
          # Burada docker build ve push işlemlerini gerçekleştirin
          echo "Would build and push ${{ matrix.image }} with tags ${{ matrix.tag }}"